/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MovieInfoServices_H
#define MovieInfoServices_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MovieInfoServicesIf {
 public:
  virtual ~MovieInfoServicesIf() {}
  virtual void GetMoviesByIds(std::vector<std::string> & _return, const std::vector<std::string> & movie_ids) = 0;
};

class MovieInfoServicesIfFactory {
 public:
  typedef MovieInfoServicesIf Handler;

  virtual ~MovieInfoServicesIfFactory() {}

  virtual MovieInfoServicesIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MovieInfoServicesIf* /* handler */) = 0;
};

class MovieInfoServicesIfSingletonFactory : virtual public MovieInfoServicesIfFactory {
 public:
  MovieInfoServicesIfSingletonFactory(const ::std::shared_ptr<MovieInfoServicesIf>& iface) : iface_(iface) {}
  virtual ~MovieInfoServicesIfSingletonFactory() {}

  virtual MovieInfoServicesIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MovieInfoServicesIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MovieInfoServicesIf> iface_;
};

class MovieInfoServicesNull : virtual public MovieInfoServicesIf {
 public:
  virtual ~MovieInfoServicesNull() {}
  void GetMoviesByIds(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* movie_ids */) {
    return;
  }
};

typedef struct _MovieInfoServices_GetMoviesByIds_args__isset {
  _MovieInfoServices_GetMoviesByIds_args__isset() : movie_ids(false) {}
  bool movie_ids :1;
} _MovieInfoServices_GetMoviesByIds_args__isset;

class MovieInfoServices_GetMoviesByIds_args {
 public:

  MovieInfoServices_GetMoviesByIds_args(const MovieInfoServices_GetMoviesByIds_args&);
  MovieInfoServices_GetMoviesByIds_args& operator=(const MovieInfoServices_GetMoviesByIds_args&);
  MovieInfoServices_GetMoviesByIds_args() {
  }

  virtual ~MovieInfoServices_GetMoviesByIds_args() noexcept;
  std::vector<std::string>  movie_ids;

  _MovieInfoServices_GetMoviesByIds_args__isset __isset;

  void __set_movie_ids(const std::vector<std::string> & val);

  bool operator == (const MovieInfoServices_GetMoviesByIds_args & rhs) const
  {
    if (!(movie_ids == rhs.movie_ids))
      return false;
    return true;
  }
  bool operator != (const MovieInfoServices_GetMoviesByIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieInfoServices_GetMoviesByIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MovieInfoServices_GetMoviesByIds_pargs {
 public:


  virtual ~MovieInfoServices_GetMoviesByIds_pargs() noexcept;
  const std::vector<std::string> * movie_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MovieInfoServices_GetMoviesByIds_result__isset {
  _MovieInfoServices_GetMoviesByIds_result__isset() : success(false) {}
  bool success :1;
} _MovieInfoServices_GetMoviesByIds_result__isset;

class MovieInfoServices_GetMoviesByIds_result {
 public:

  MovieInfoServices_GetMoviesByIds_result(const MovieInfoServices_GetMoviesByIds_result&);
  MovieInfoServices_GetMoviesByIds_result& operator=(const MovieInfoServices_GetMoviesByIds_result&);
  MovieInfoServices_GetMoviesByIds_result() {
  }

  virtual ~MovieInfoServices_GetMoviesByIds_result() noexcept;
  std::vector<std::string>  success;

  _MovieInfoServices_GetMoviesByIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const MovieInfoServices_GetMoviesByIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MovieInfoServices_GetMoviesByIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieInfoServices_GetMoviesByIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MovieInfoServices_GetMoviesByIds_presult__isset {
  _MovieInfoServices_GetMoviesByIds_presult__isset() : success(false) {}
  bool success :1;
} _MovieInfoServices_GetMoviesByIds_presult__isset;

class MovieInfoServices_GetMoviesByIds_presult {
 public:


  virtual ~MovieInfoServices_GetMoviesByIds_presult() noexcept;
  std::vector<std::string> * success;

  _MovieInfoServices_GetMoviesByIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MovieInfoServicesClient : virtual public MovieInfoServicesIf {
 public:
  MovieInfoServicesClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MovieInfoServicesClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetMoviesByIds(std::vector<std::string> & _return, const std::vector<std::string> & movie_ids);
  void send_GetMoviesByIds(const std::vector<std::string> & movie_ids);
  void recv_GetMoviesByIds(std::vector<std::string> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MovieInfoServicesProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MovieInfoServicesIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MovieInfoServicesProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetMoviesByIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MovieInfoServicesProcessor(::std::shared_ptr<MovieInfoServicesIf> iface) :
    iface_(iface) {
    processMap_["GetMoviesByIds"] = &MovieInfoServicesProcessor::process_GetMoviesByIds;
  }

  virtual ~MovieInfoServicesProcessor() {}
};

class MovieInfoServicesProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MovieInfoServicesProcessorFactory(const ::std::shared_ptr< MovieInfoServicesIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MovieInfoServicesIfFactory > handlerFactory_;
};

class MovieInfoServicesMultiface : virtual public MovieInfoServicesIf {
 public:
  MovieInfoServicesMultiface(std::vector<std::shared_ptr<MovieInfoServicesIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MovieInfoServicesMultiface() {}
 protected:
  std::vector<std::shared_ptr<MovieInfoServicesIf> > ifaces_;
  MovieInfoServicesMultiface() {}
  void add(::std::shared_ptr<MovieInfoServicesIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetMoviesByIds(std::vector<std::string> & _return, const std::vector<std::string> & movie_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMoviesByIds(_return, movie_ids);
    }
    ifaces_[i]->GetMoviesByIds(_return, movie_ids);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MovieInfoServicesConcurrentClient : virtual public MovieInfoServicesIf {
 public:
  MovieInfoServicesConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MovieInfoServicesConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetMoviesByIds(std::vector<std::string> & _return, const std::vector<std::string> & movie_ids);
  int32_t send_GetMoviesByIds(const std::vector<std::string> & movie_ids);
  void recv_GetMoviesByIds(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
